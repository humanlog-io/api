// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: types/v1/logquery.proto

package typesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UnaryOp_Operator int32

const (
	UnaryOp_INVALID UnaryOp_Operator = 0
	UnaryOp_NOT     UnaryOp_Operator = 1
	UnaryOp_NEG     UnaryOp_Operator = 2
)

// Enum value maps for UnaryOp_Operator.
var (
	UnaryOp_Operator_name = map[int32]string{
		0: "INVALID",
		1: "NOT",
		2: "NEG",
	}
	UnaryOp_Operator_value = map[string]int32{
		"INVALID": 0,
		"NOT":     1,
		"NEG":     2,
	}
)

func (x UnaryOp_Operator) Enum() *UnaryOp_Operator {
	p := new(UnaryOp_Operator)
	*p = x
	return p
}

func (x UnaryOp_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnaryOp_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1_logquery_proto_enumTypes[0].Descriptor()
}

func (UnaryOp_Operator) Type() protoreflect.EnumType {
	return &file_types_v1_logquery_proto_enumTypes[0]
}

func (x UnaryOp_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnaryOp_Operator.Descriptor instead.
func (UnaryOp_Operator) EnumDescriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{11, 0}
}

type BinaryOp_Operator int32

const (
	BinaryOp_INVALID   BinaryOp_Operator = 0
	BinaryOp_LOG_AND   BinaryOp_Operator = 101
	BinaryOp_LOG_OR    BinaryOp_Operator = 102
	BinaryOp_NUM_ADD   BinaryOp_Operator = 201
	BinaryOp_NUM_SUB   BinaryOp_Operator = 202
	BinaryOp_NUM_DIV   BinaryOp_Operator = 203
	BinaryOp_NUM_MUL   BinaryOp_Operator = 204
	BinaryOp_CMP_EQ    BinaryOp_Operator = 301
	BinaryOp_CMP_NOTEQ BinaryOp_Operator = 302
	BinaryOp_CMP_GT    BinaryOp_Operator = 303
	BinaryOp_CMP_GTE   BinaryOp_Operator = 304
	BinaryOp_CMP_LT    BinaryOp_Operator = 305
	BinaryOp_CMP_LTE   BinaryOp_Operator = 306
	BinaryOp_SET_IN    BinaryOp_Operator = 401
	BinaryOp_SET_NOTIN BinaryOp_Operator = 402
)

// Enum value maps for BinaryOp_Operator.
var (
	BinaryOp_Operator_name = map[int32]string{
		0:   "INVALID",
		101: "LOG_AND",
		102: "LOG_OR",
		201: "NUM_ADD",
		202: "NUM_SUB",
		203: "NUM_DIV",
		204: "NUM_MUL",
		301: "CMP_EQ",
		302: "CMP_NOTEQ",
		303: "CMP_GT",
		304: "CMP_GTE",
		305: "CMP_LT",
		306: "CMP_LTE",
		401: "SET_IN",
		402: "SET_NOTIN",
	}
	BinaryOp_Operator_value = map[string]int32{
		"INVALID":   0,
		"LOG_AND":   101,
		"LOG_OR":    102,
		"NUM_ADD":   201,
		"NUM_SUB":   202,
		"NUM_DIV":   203,
		"NUM_MUL":   204,
		"CMP_EQ":    301,
		"CMP_NOTEQ": 302,
		"CMP_GT":    303,
		"CMP_GTE":   304,
		"CMP_LT":    305,
		"CMP_LTE":   306,
		"SET_IN":    401,
		"SET_NOTIN": 402,
	}
)

func (x BinaryOp_Operator) Enum() *BinaryOp_Operator {
	p := new(BinaryOp_Operator)
	*p = x
	return p
}

func (x BinaryOp_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryOp_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1_logquery_proto_enumTypes[1].Descriptor()
}

func (BinaryOp_Operator) Type() protoreflect.EnumType {
	return &file_types_v1_logquery_proto_enumTypes[1]
}

func (x BinaryOp_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryOp_Operator.Descriptor instead.
func (BinaryOp_Operator) EnumDescriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{12, 0}
}

type LogQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timerange     *Timerange             `protobuf:"bytes,1,opt,name=timerange,proto3" json:"timerange,omitempty"`
	Context       *Context               `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	Query         *Statements            `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogQuery) Reset() {
	*x = LogQuery{}
	mi := &file_types_v1_logquery_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogQuery) ProtoMessage() {}

func (x *LogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogQuery.ProtoReflect.Descriptor instead.
func (*LogQuery) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{0}
}

func (x *LogQuery) GetTimerange() *Timerange {
	if x != nil {
		return x.Timerange
	}
	return nil
}

func (x *LogQuery) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *LogQuery) GetQuery() *Statements {
	if x != nil {
		return x.Query
	}
	return nil
}

type Timerange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          *Expr                  `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            *Expr                  `protobuf:"bytes,2,opt,name=to,proto3,oneof" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timerange) Reset() {
	*x = Timerange{}
	mi := &file_types_v1_logquery_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timerange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timerange) ProtoMessage() {}

func (x *Timerange) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timerange.ProtoReflect.Descriptor instead.
func (*Timerange) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{1}
}

func (x *Timerange) GetFrom() *Expr {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Timerange) GetTo() *Expr {
	if x != nil {
		return x.To
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MachineId     *Expr                  `protobuf:"bytes,101,opt,name=machine_id,json=machineId,proto3,oneof" json:"machine_id,omitempty"`
	SessionId     *Expr                  `protobuf:"bytes,102,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Context) Reset() {
	*x = Context{}
	mi := &file_types_v1_logquery_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{2}
}

func (x *Context) GetMachineId() *Expr {
	if x != nil {
		return x.MachineId
	}
	return nil
}

func (x *Context) GetSessionId() *Expr {
	if x != nil {
		return x.SessionId
	}
	return nil
}

type Statements struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// statements are `|` separated
	Statements    []*Statement     `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
	Render        *RenderStatement `protobuf:"bytes,2,opt,name=render,proto3" json:"render,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Statements) Reset() {
	*x = Statements{}
	mi := &file_types_v1_logquery_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Statements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statements) ProtoMessage() {}

func (x *Statements) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statements.ProtoReflect.Descriptor instead.
func (*Statements) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{3}
}

func (x *Statements) GetStatements() []*Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *Statements) GetRender() *RenderStatement {
	if x != nil {
		return x.Render
	}
	return nil
}

type Statement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Stmt:
	//
	//	*Statement_Filter
	//	*Statement_Summarize
	//	*Statement_Project
	Stmt          isStatement_Stmt `protobuf_oneof:"stmt"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Statement) Reset() {
	*x = Statement{}
	mi := &file_types_v1_logquery_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{4}
}

func (x *Statement) GetStmt() isStatement_Stmt {
	if x != nil {
		return x.Stmt
	}
	return nil
}

func (x *Statement) GetFilter() *FilterOperator {
	if x != nil {
		if x, ok := x.Stmt.(*Statement_Filter); ok {
			return x.Filter
		}
	}
	return nil
}

func (x *Statement) GetSummarize() *SummarizeOperator {
	if x != nil {
		if x, ok := x.Stmt.(*Statement_Summarize); ok {
			return x.Summarize
		}
	}
	return nil
}

func (x *Statement) GetProject() *ProjectOperator {
	if x != nil {
		if x, ok := x.Stmt.(*Statement_Project); ok {
			return x.Project
		}
	}
	return nil
}

type isStatement_Stmt interface {
	isStatement_Stmt()
}

type Statement_Filter struct {
	Filter *FilterOperator `protobuf:"bytes,1,opt,name=filter,proto3,oneof"`
}

type Statement_Summarize struct {
	Summarize *SummarizeOperator `protobuf:"bytes,2,opt,name=summarize,proto3,oneof"`
}

type Statement_Project struct {
	Project *ProjectOperator `protobuf:"bytes,3,opt,name=project,proto3,oneof"`
}

func (*Statement_Filter) isStatement_Stmt() {}

func (*Statement_Summarize) isStatement_Stmt() {}

func (*Statement_Project) isStatement_Stmt() {}

type FilterOperator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expr          *Expr                  `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterOperator) Reset() {
	*x = FilterOperator{}
	mi := &file_types_v1_logquery_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOperator) ProtoMessage() {}

func (x *FilterOperator) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOperator.ProtoReflect.Descriptor instead.
func (*FilterOperator) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{5}
}

func (x *FilterOperator) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type SummarizeOperator struct {
	state             protoimpl.MessageState        `protogen:"open.v1"`
	AggregateFunction *FuncCall                     `protobuf:"bytes,1,opt,name=aggregate_function,json=aggregateFunction,proto3" json:"aggregate_function,omitempty"`
	By                *SummarizeOperator_ByOperator `protobuf:"bytes,2,opt,name=by,proto3,oneof" json:"by,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SummarizeOperator) Reset() {
	*x = SummarizeOperator{}
	mi := &file_types_v1_logquery_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummarizeOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeOperator) ProtoMessage() {}

func (x *SummarizeOperator) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeOperator.ProtoReflect.Descriptor instead.
func (*SummarizeOperator) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{6}
}

func (x *SummarizeOperator) GetAggregateFunction() *FuncCall {
	if x != nil {
		return x.AggregateFunction
	}
	return nil
}

func (x *SummarizeOperator) GetBy() *SummarizeOperator_ByOperator {
	if x != nil {
		return x.By
	}
	return nil
}

type ProjectOperator struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Projections   []*ProjectOperator_Projection `protobuf:"bytes,1,rep,name=projections,proto3" json:"projections,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectOperator) Reset() {
	*x = ProjectOperator{}
	mi := &file_types_v1_logquery_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectOperator) ProtoMessage() {}

func (x *ProjectOperator) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectOperator.ProtoReflect.Descriptor instead.
func (*ProjectOperator) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{7}
}

func (x *ProjectOperator) GetProjections() []*ProjectOperator_Projection {
	if x != nil {
		return x.Projections
	}
	return nil
}

type RenderStatement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Stmt:
	//
	//	*RenderStatement_Split
	Stmt          isRenderStatement_Stmt `protobuf_oneof:"stmt"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderStatement) Reset() {
	*x = RenderStatement{}
	mi := &file_types_v1_logquery_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderStatement) ProtoMessage() {}

func (x *RenderStatement) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderStatement.ProtoReflect.Descriptor instead.
func (*RenderStatement) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{8}
}

func (x *RenderStatement) GetStmt() isRenderStatement_Stmt {
	if x != nil {
		return x.Stmt
	}
	return nil
}

func (x *RenderStatement) GetSplit() *SplitOperator {
	if x != nil {
		if x, ok := x.Stmt.(*RenderStatement_Split); ok {
			return x.Split
		}
	}
	return nil
}

type isRenderStatement_Stmt interface {
	isRenderStatement_Stmt()
}

type RenderStatement_Split struct {
	Split *SplitOperator `protobuf:"bytes,1,opt,name=split,proto3,oneof"`
}

func (*RenderStatement_Split) isRenderStatement_Stmt() {}

type SplitOperator struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	By            *SplitOperator_ByOperator `protobuf:"bytes,2,opt,name=by,proto3" json:"by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitOperator) Reset() {
	*x = SplitOperator{}
	mi := &file_types_v1_logquery_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitOperator) ProtoMessage() {}

func (x *SplitOperator) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitOperator.ProtoReflect.Descriptor instead.
func (*SplitOperator) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{9}
}

func (x *SplitOperator) GetBy() *SplitOperator_ByOperator {
	if x != nil {
		return x.By
	}
	return nil
}

type Expr struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Expr:
	//
	//	*Expr_Literal
	//	*Expr_Unary
	//	*Expr_Binary
	//	*Expr_FuncCall
	//	*Expr_Identifier
	//	*Expr_Selector
	//	*Expr_Indexor
	Expr          isExpr_Expr `protobuf_oneof:"expr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expr) Reset() {
	*x = Expr{}
	mi := &file_types_v1_logquery_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{10}
}

func (x *Expr) GetExpr() isExpr_Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *Expr) GetLiteral() *Val {
	if x != nil {
		if x, ok := x.Expr.(*Expr_Literal); ok {
			return x.Literal
		}
	}
	return nil
}

func (x *Expr) GetUnary() *UnaryOp {
	if x != nil {
		if x, ok := x.Expr.(*Expr_Unary); ok {
			return x.Unary
		}
	}
	return nil
}

func (x *Expr) GetBinary() *BinaryOp {
	if x != nil {
		if x, ok := x.Expr.(*Expr_Binary); ok {
			return x.Binary
		}
	}
	return nil
}

func (x *Expr) GetFuncCall() *FuncCall {
	if x != nil {
		if x, ok := x.Expr.(*Expr_FuncCall); ok {
			return x.FuncCall
		}
	}
	return nil
}

func (x *Expr) GetIdentifier() *Identifier {
	if x != nil {
		if x, ok := x.Expr.(*Expr_Identifier); ok {
			return x.Identifier
		}
	}
	return nil
}

func (x *Expr) GetSelector() *Selector {
	if x != nil {
		if x, ok := x.Expr.(*Expr_Selector); ok {
			return x.Selector
		}
	}
	return nil
}

func (x *Expr) GetIndexor() *Indexor {
	if x != nil {
		if x, ok := x.Expr.(*Expr_Indexor); ok {
			return x.Indexor
		}
	}
	return nil
}

type isExpr_Expr interface {
	isExpr_Expr()
}

type Expr_Literal struct {
	Literal *Val `protobuf:"bytes,101,opt,name=literal,proto3,oneof"`
}

type Expr_Unary struct {
	Unary *UnaryOp `protobuf:"bytes,102,opt,name=unary,proto3,oneof"`
}

type Expr_Binary struct {
	Binary *BinaryOp `protobuf:"bytes,103,opt,name=binary,proto3,oneof"`
}

type Expr_FuncCall struct {
	FuncCall *FuncCall `protobuf:"bytes,104,opt,name=func_call,json=funcCall,proto3,oneof"`
}

type Expr_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,105,opt,name=identifier,proto3,oneof"`
}

type Expr_Selector struct {
	Selector *Selector `protobuf:"bytes,106,opt,name=selector,proto3,oneof"` // msg.hello.world
}

type Expr_Indexor struct {
	Indexor *Indexor `protobuf:"bytes,107,opt,name=indexor,proto3,oneof"` // kvs['hello']
}

func (*Expr_Literal) isExpr_Expr() {}

func (*Expr_Unary) isExpr_Expr() {}

func (*Expr_Binary) isExpr_Expr() {}

func (*Expr_FuncCall) isExpr_Expr() {}

func (*Expr_Identifier) isExpr_Expr() {}

func (*Expr_Selector) isExpr_Expr() {}

func (*Expr_Indexor) isExpr_Expr() {}

type UnaryOp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Op            UnaryOp_Operator       `protobuf:"varint,1,opt,name=op,proto3,enum=types.v1.UnaryOp_Operator" json:"op,omitempty"`
	Arg           *Expr                  `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnaryOp) Reset() {
	*x = UnaryOp{}
	mi := &file_types_v1_logquery_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnaryOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryOp) ProtoMessage() {}

func (x *UnaryOp) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryOp.ProtoReflect.Descriptor instead.
func (*UnaryOp) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{11}
}

func (x *UnaryOp) GetOp() UnaryOp_Operator {
	if x != nil {
		return x.Op
	}
	return UnaryOp_INVALID
}

func (x *UnaryOp) GetArg() *Expr {
	if x != nil {
		return x.Arg
	}
	return nil
}

type BinaryOp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lhs           *Expr                  `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Op            BinaryOp_Operator      `protobuf:"varint,2,opt,name=op,proto3,enum=types.v1.BinaryOp_Operator" json:"op,omitempty"`
	Rhs           *Expr                  `protobuf:"bytes,3,opt,name=rhs,proto3" json:"rhs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BinaryOp) Reset() {
	*x = BinaryOp{}
	mi := &file_types_v1_logquery_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryOp) ProtoMessage() {}

func (x *BinaryOp) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryOp.ProtoReflect.Descriptor instead.
func (*BinaryOp) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{12}
}

func (x *BinaryOp) GetLhs() *Expr {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *BinaryOp) GetOp() BinaryOp_Operator {
	if x != nil {
		return x.Op
	}
	return BinaryOp_INVALID
}

func (x *BinaryOp) GetRhs() *Expr {
	if x != nil {
		return x.Rhs
	}
	return nil
}

type FuncCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args          []*Expr                `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuncCall) Reset() {
	*x = FuncCall{}
	mi := &file_types_v1_logquery_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuncCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncCall) ProtoMessage() {}

func (x *FuncCall) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncCall.ProtoReflect.Descriptor instead.
func (*FuncCall) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{13}
}

func (x *FuncCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FuncCall) GetArgs() []*Expr {
	if x != nil {
		return x.Args
	}
	return nil
}

type Identifier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	mi := &file_types_v1_logquery_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{14}
}

func (x *Identifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Selector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *Expr                  `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Identifier    *Identifier            `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Selector) Reset() {
	*x = Selector{}
	mi := &file_types_v1_logquery_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{15}
}

func (x *Selector) GetX() *Expr {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Selector) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type Indexor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *Expr                  `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Index         *Expr                  `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Indexor) Reset() {
	*x = Indexor{}
	mi := &file_types_v1_logquery_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Indexor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indexor) ProtoMessage() {}

func (x *Indexor) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indexor.ProtoReflect.Descriptor instead.
func (*Indexor) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{16}
}

func (x *Indexor) GetX() *Expr {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Indexor) GetIndex() *Expr {
	if x != nil {
		return x.Index
	}
	return nil
}

type SummarizeOperator_ByOperator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scalars       []*Expr                `protobuf:"bytes,1,rep,name=scalars,proto3" json:"scalars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummarizeOperator_ByOperator) Reset() {
	*x = SummarizeOperator_ByOperator{}
	mi := &file_types_v1_logquery_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummarizeOperator_ByOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeOperator_ByOperator) ProtoMessage() {}

func (x *SummarizeOperator_ByOperator) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeOperator_ByOperator.ProtoReflect.Descriptor instead.
func (*SummarizeOperator_ByOperator) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SummarizeOperator_ByOperator) GetScalars() []*Expr {
	if x != nil {
		return x.Scalars
	}
	return nil
}

type ProjectOperator_Projection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Column        *Identifier            `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Value         *Expr                  `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectOperator_Projection) Reset() {
	*x = ProjectOperator_Projection{}
	mi := &file_types_v1_logquery_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectOperator_Projection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectOperator_Projection) ProtoMessage() {}

func (x *ProjectOperator_Projection) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectOperator_Projection.ProtoReflect.Descriptor instead.
func (*ProjectOperator_Projection) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ProjectOperator_Projection) GetColumn() *Identifier {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *ProjectOperator_Projection) GetValue() *Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

type SplitOperator_ByOperator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scalars       []*Expr                `protobuf:"bytes,1,rep,name=scalars,proto3" json:"scalars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitOperator_ByOperator) Reset() {
	*x = SplitOperator_ByOperator{}
	mi := &file_types_v1_logquery_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitOperator_ByOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitOperator_ByOperator) ProtoMessage() {}

func (x *SplitOperator_ByOperator) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_logquery_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitOperator_ByOperator.ProtoReflect.Descriptor instead.
func (*SplitOperator_ByOperator) Descriptor() ([]byte, []int) {
	return file_types_v1_logquery_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SplitOperator_ByOperator) GetScalars() []*Expr {
	if x != nil {
		return x.Scalars
	}
	return nil
}

var File_types_v1_logquery_proto protoreflect.FileDescriptor

var file_types_v1_logquery_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x5b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f,
	0x22, 0x8f, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x0a,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x22, 0x74, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x7a, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x73, 0x74, 0x6d, 0x74, 0x22, 0x34, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xd2, 0x01, 0x0a,
	0x11, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x41, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x02, 0x62, 0x79, 0x88,
	0x01, 0x01, 0x1a, 0x36, 0x0a, 0x0a, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x28, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62,
	0x79, 0x22, 0xca, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6f, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a,
	0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x6d, 0x74, 0x22, 0x7b, 0x0a, 0x0d, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x02, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x62, 0x79, 0x1a,
	0x36, 0x0a, 0x0a, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x07, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x29, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x75,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x48, 0x00, 0x52,
	0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x6f, 0x72, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x6f, 0x72,
	0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x70, 0x12, 0x2a, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x4f, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61,
	0x72, 0x67, 0x22, 0x29, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x4f, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x47, 0x10, 0x02, 0x22, 0xd6, 0x02,
	0x0a, 0x08, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x12, 0x20, 0x0a, 0x03, 0x6c, 0x68,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x2b, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x03, 0x72, 0x68, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x72, 0x68, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x08,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x4e, 0x44,
	0x10, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x5f, 0x4f, 0x52, 0x10, 0x66, 0x12, 0x0c,
	0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x10, 0xca, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x55,
	0x4d, 0x5f, 0x44, 0x49, 0x56, 0x10, 0xcb, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x5f,
	0x4d, 0x55, 0x4c, 0x10, 0xcc, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x50, 0x5f, 0x45, 0x51,
	0x10, 0xad, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x51,
	0x10, 0xae, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x50, 0x5f, 0x47, 0x54, 0x10, 0xaf, 0x02,
	0x12, 0x0c, 0x0a, 0x07, 0x43, 0x4d, 0x50, 0x5f, 0x47, 0x54, 0x45, 0x10, 0xb0, 0x02, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x50, 0x5f, 0x4c, 0x54, 0x10, 0xb1, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x43,
	0x4d, 0x50, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0xb2, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x45, 0x54,
	0x5f, 0x49, 0x4e, 0x10, 0x91, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x4e, 0x10, 0x92, 0x03, 0x22, 0x42, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x08,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x01, 0x78, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x07,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x01, 0x78, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x8d, 0x01, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4c, 0x6f,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6c,
	0x6f, 0x67, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54,
	0x58, 0x58, 0xaa, 0x02, 0x08, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x09, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_types_v1_logquery_proto_rawDescOnce sync.Once
	file_types_v1_logquery_proto_rawDescData = file_types_v1_logquery_proto_rawDesc
)

func file_types_v1_logquery_proto_rawDescGZIP() []byte {
	file_types_v1_logquery_proto_rawDescOnce.Do(func() {
		file_types_v1_logquery_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_v1_logquery_proto_rawDescData)
	})
	return file_types_v1_logquery_proto_rawDescData
}

var file_types_v1_logquery_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_types_v1_logquery_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_types_v1_logquery_proto_goTypes = []any{
	(UnaryOp_Operator)(0),                // 0: types.v1.UnaryOp.Operator
	(BinaryOp_Operator)(0),               // 1: types.v1.BinaryOp.Operator
	(*LogQuery)(nil),                     // 2: types.v1.LogQuery
	(*Timerange)(nil),                    // 3: types.v1.Timerange
	(*Context)(nil),                      // 4: types.v1.Context
	(*Statements)(nil),                   // 5: types.v1.Statements
	(*Statement)(nil),                    // 6: types.v1.Statement
	(*FilterOperator)(nil),               // 7: types.v1.FilterOperator
	(*SummarizeOperator)(nil),            // 8: types.v1.SummarizeOperator
	(*ProjectOperator)(nil),              // 9: types.v1.ProjectOperator
	(*RenderStatement)(nil),              // 10: types.v1.RenderStatement
	(*SplitOperator)(nil),                // 11: types.v1.SplitOperator
	(*Expr)(nil),                         // 12: types.v1.Expr
	(*UnaryOp)(nil),                      // 13: types.v1.UnaryOp
	(*BinaryOp)(nil),                     // 14: types.v1.BinaryOp
	(*FuncCall)(nil),                     // 15: types.v1.FuncCall
	(*Identifier)(nil),                   // 16: types.v1.Identifier
	(*Selector)(nil),                     // 17: types.v1.Selector
	(*Indexor)(nil),                      // 18: types.v1.Indexor
	(*SummarizeOperator_ByOperator)(nil), // 19: types.v1.SummarizeOperator.ByOperator
	(*ProjectOperator_Projection)(nil),   // 20: types.v1.ProjectOperator.Projection
	(*SplitOperator_ByOperator)(nil),     // 21: types.v1.SplitOperator.ByOperator
	(*Val)(nil),                          // 22: types.v1.Val
}
var file_types_v1_logquery_proto_depIdxs = []int32{
	3,  // 0: types.v1.LogQuery.timerange:type_name -> types.v1.Timerange
	4,  // 1: types.v1.LogQuery.context:type_name -> types.v1.Context
	5,  // 2: types.v1.LogQuery.query:type_name -> types.v1.Statements
	12, // 3: types.v1.Timerange.from:type_name -> types.v1.Expr
	12, // 4: types.v1.Timerange.to:type_name -> types.v1.Expr
	12, // 5: types.v1.Context.machine_id:type_name -> types.v1.Expr
	12, // 6: types.v1.Context.session_id:type_name -> types.v1.Expr
	6,  // 7: types.v1.Statements.statements:type_name -> types.v1.Statement
	10, // 8: types.v1.Statements.render:type_name -> types.v1.RenderStatement
	7,  // 9: types.v1.Statement.filter:type_name -> types.v1.FilterOperator
	8,  // 10: types.v1.Statement.summarize:type_name -> types.v1.SummarizeOperator
	9,  // 11: types.v1.Statement.project:type_name -> types.v1.ProjectOperator
	12, // 12: types.v1.FilterOperator.expr:type_name -> types.v1.Expr
	15, // 13: types.v1.SummarizeOperator.aggregate_function:type_name -> types.v1.FuncCall
	19, // 14: types.v1.SummarizeOperator.by:type_name -> types.v1.SummarizeOperator.ByOperator
	20, // 15: types.v1.ProjectOperator.projections:type_name -> types.v1.ProjectOperator.Projection
	11, // 16: types.v1.RenderStatement.split:type_name -> types.v1.SplitOperator
	21, // 17: types.v1.SplitOperator.by:type_name -> types.v1.SplitOperator.ByOperator
	22, // 18: types.v1.Expr.literal:type_name -> types.v1.Val
	13, // 19: types.v1.Expr.unary:type_name -> types.v1.UnaryOp
	14, // 20: types.v1.Expr.binary:type_name -> types.v1.BinaryOp
	15, // 21: types.v1.Expr.func_call:type_name -> types.v1.FuncCall
	16, // 22: types.v1.Expr.identifier:type_name -> types.v1.Identifier
	17, // 23: types.v1.Expr.selector:type_name -> types.v1.Selector
	18, // 24: types.v1.Expr.indexor:type_name -> types.v1.Indexor
	0,  // 25: types.v1.UnaryOp.op:type_name -> types.v1.UnaryOp.Operator
	12, // 26: types.v1.UnaryOp.arg:type_name -> types.v1.Expr
	12, // 27: types.v1.BinaryOp.lhs:type_name -> types.v1.Expr
	1,  // 28: types.v1.BinaryOp.op:type_name -> types.v1.BinaryOp.Operator
	12, // 29: types.v1.BinaryOp.rhs:type_name -> types.v1.Expr
	12, // 30: types.v1.FuncCall.args:type_name -> types.v1.Expr
	12, // 31: types.v1.Selector.x:type_name -> types.v1.Expr
	16, // 32: types.v1.Selector.identifier:type_name -> types.v1.Identifier
	12, // 33: types.v1.Indexor.x:type_name -> types.v1.Expr
	12, // 34: types.v1.Indexor.index:type_name -> types.v1.Expr
	12, // 35: types.v1.SummarizeOperator.ByOperator.scalars:type_name -> types.v1.Expr
	16, // 36: types.v1.ProjectOperator.Projection.column:type_name -> types.v1.Identifier
	12, // 37: types.v1.ProjectOperator.Projection.value:type_name -> types.v1.Expr
	12, // 38: types.v1.SplitOperator.ByOperator.scalars:type_name -> types.v1.Expr
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_types_v1_logquery_proto_init() }
func file_types_v1_logquery_proto_init() {
	if File_types_v1_logquery_proto != nil {
		return
	}
	file_types_v1_types_proto_init()
	file_types_v1_logquery_proto_msgTypes[1].OneofWrappers = []any{}
	file_types_v1_logquery_proto_msgTypes[2].OneofWrappers = []any{}
	file_types_v1_logquery_proto_msgTypes[4].OneofWrappers = []any{
		(*Statement_Filter)(nil),
		(*Statement_Summarize)(nil),
		(*Statement_Project)(nil),
	}
	file_types_v1_logquery_proto_msgTypes[6].OneofWrappers = []any{}
	file_types_v1_logquery_proto_msgTypes[8].OneofWrappers = []any{
		(*RenderStatement_Split)(nil),
	}
	file_types_v1_logquery_proto_msgTypes[10].OneofWrappers = []any{
		(*Expr_Literal)(nil),
		(*Expr_Unary)(nil),
		(*Expr_Binary)(nil),
		(*Expr_FuncCall)(nil),
		(*Expr_Identifier)(nil),
		(*Expr_Selector)(nil),
		(*Expr_Indexor)(nil),
	}
	file_types_v1_logquery_proto_msgTypes[18].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_v1_logquery_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_v1_logquery_proto_goTypes,
		DependencyIndexes: file_types_v1_logquery_proto_depIdxs,
		EnumInfos:         file_types_v1_logquery_proto_enumTypes,
		MessageInfos:      file_types_v1_logquery_proto_msgTypes,
	}.Build()
	File_types_v1_logquery_proto = out.File
	file_types_v1_logquery_proto_rawDesc = nil
	file_types_v1_logquery_proto_goTypes = nil
	file_types_v1_logquery_proto_depIdxs = nil
}
