// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: types/v1/types.proto

package typesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScalarType int32

const (
	ScalarType_unknown ScalarType = 0
	ScalarType_str     ScalarType = 1
	ScalarType_f64     ScalarType = 2
	ScalarType_i64     ScalarType = 3
	ScalarType_bool    ScalarType = 4
	ScalarType_ts      ScalarType = 5
	ScalarType_dur     ScalarType = 6
)

// Enum value maps for ScalarType.
var (
	ScalarType_name = map[int32]string{
		0: "unknown",
		1: "str",
		2: "f64",
		3: "i64",
		4: "bool",
		5: "ts",
		6: "dur",
	}
	ScalarType_value = map[string]int32{
		"unknown": 0,
		"str":     1,
		"f64":     2,
		"i64":     3,
		"bool":    4,
		"ts":      5,
		"dur":     6,
	}
)

func (x ScalarType) Enum() *ScalarType {
	p := new(ScalarType)
	*p = x
	return p
}

func (x ScalarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalarType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1_types_proto_enumTypes[0].Descriptor()
}

func (ScalarType) Type() protoreflect.EnumType {
	return &file_types_v1_types_proto_enumTypes[0]
}

func (x ScalarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalarType.Descriptor instead.
func (ScalarType) EnumDescriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{0}
}

type VarType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*VarType_Scalar
	//	*VarType_Array
	//	*VarType_Object
	Type          isVarType_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VarType) Reset() {
	*x = VarType{}
	mi := &file_types_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VarType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarType) ProtoMessage() {}

func (x *VarType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarType.ProtoReflect.Descriptor instead.
func (*VarType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *VarType) GetType() isVarType_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *VarType) GetScalar() ScalarType {
	if x != nil {
		if x, ok := x.Type.(*VarType_Scalar); ok {
			return x.Scalar
		}
	}
	return ScalarType_unknown
}

func (x *VarType) GetArray() *VarType_ArrayType {
	if x != nil {
		if x, ok := x.Type.(*VarType_Array); ok {
			return x.Array
		}
	}
	return nil
}

func (x *VarType) GetObject() *VarType_ObjectType {
	if x != nil {
		if x, ok := x.Type.(*VarType_Object); ok {
			return x.Object
		}
	}
	return nil
}

type isVarType_Type interface {
	isVarType_Type()
}

type VarType_Scalar struct {
	Scalar ScalarType `protobuf:"varint,1,opt,name=scalar,proto3,enum=types.v1.ScalarType,oneof"`
}

type VarType_Array struct {
	Array *VarType_ArrayType `protobuf:"bytes,2,opt,name=array,proto3,oneof"`
}

type VarType_Object struct {
	Object *VarType_ObjectType `protobuf:"bytes,3,opt,name=object,proto3,oneof"`
}

func (*VarType_Scalar) isVarType_Type() {}

func (*VarType_Array) isVarType_Type() {}

func (*VarType_Object) isVarType_Type() {}

type KV struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *Val                   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KV) Reset() {
	*x = KV{}
	mi := &file_types_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KV) ProtoMessage() {}

func (x *KV) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KV.ProtoReflect.Descriptor instead.
func (*KV) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *KV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KV) GetValue() *Val {
	if x != nil {
		return x.Value
	}
	return nil
}

type Val struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  *VarType               `protobuf:"bytes,100,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Val_Str
	//	*Val_F64
	//	*Val_I64
	//	*Val_Bool
	//	*Val_Arr
	//	*Val_Obj
	//	*Val_Ts
	//	*Val_Dur
	Kind          isVal_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Val) Reset() {
	*x = Val{}
	mi := &file_types_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Val) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Val) ProtoMessage() {}

func (x *Val) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Val.ProtoReflect.Descriptor instead.
func (*Val) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *Val) GetType() *VarType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Val) GetKind() isVal_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Val) GetStr() string {
	if x != nil {
		if x, ok := x.Kind.(*Val_Str); ok {
			return x.Str
		}
	}
	return ""
}

func (x *Val) GetF64() float64 {
	if x != nil {
		if x, ok := x.Kind.(*Val_F64); ok {
			return x.F64
		}
	}
	return 0
}

func (x *Val) GetI64() int64 {
	if x != nil {
		if x, ok := x.Kind.(*Val_I64); ok {
			return x.I64
		}
	}
	return 0
}

func (x *Val) GetBool() bool {
	if x != nil {
		if x, ok := x.Kind.(*Val_Bool); ok {
			return x.Bool
		}
	}
	return false
}

func (x *Val) GetArr() *Arr {
	if x != nil {
		if x, ok := x.Kind.(*Val_Arr); ok {
			return x.Arr
		}
	}
	return nil
}

func (x *Val) GetObj() *Obj {
	if x != nil {
		if x, ok := x.Kind.(*Val_Obj); ok {
			return x.Obj
		}
	}
	return nil
}

func (x *Val) GetTs() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Kind.(*Val_Ts); ok {
			return x.Ts
		}
	}
	return nil
}

func (x *Val) GetDur() *durationpb.Duration {
	if x != nil {
		if x, ok := x.Kind.(*Val_Dur); ok {
			return x.Dur
		}
	}
	return nil
}

type isVal_Kind interface {
	isVal_Kind()
}

type Val_Str struct {
	Str string `protobuf:"bytes,201,opt,name=str,proto3,oneof"`
}

type Val_F64 struct {
	F64 float64 `protobuf:"fixed64,202,opt,name=f64,proto3,oneof"`
}

type Val_I64 struct {
	I64 int64 `protobuf:"varint,203,opt,name=i64,proto3,oneof"`
}

type Val_Bool struct {
	Bool bool `protobuf:"varint,204,opt,name=bool,proto3,oneof"`
}

type Val_Arr struct {
	Arr *Arr `protobuf:"bytes,205,opt,name=arr,proto3,oneof"`
}

type Val_Obj struct {
	Obj *Obj `protobuf:"bytes,206,opt,name=obj,proto3,oneof"`
}

type Val_Ts struct {
	Ts *timestamppb.Timestamp `protobuf:"bytes,207,opt,name=ts,proto3,oneof"`
}

type Val_Dur struct {
	Dur *durationpb.Duration `protobuf:"bytes,208,opt,name=dur,proto3,oneof"`
}

func (*Val_Str) isVal_Kind() {}

func (*Val_F64) isVal_Kind() {}

func (*Val_I64) isVal_Kind() {}

func (*Val_Bool) isVal_Kind() {}

func (*Val_Arr) isVal_Kind() {}

func (*Val_Obj) isVal_Kind() {}

func (*Val_Ts) isVal_Kind() {}

func (*Val_Dur) isVal_Kind() {}

type Obj struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kvs           []*KV                  `protobuf:"bytes,1,rep,name=kvs,proto3" json:"kvs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Obj) Reset() {
	*x = Obj{}
	mi := &file_types_v1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Obj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Obj) ProtoMessage() {}

func (x *Obj) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Obj.ProtoReflect.Descriptor instead.
func (*Obj) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *Obj) GetKvs() []*KV {
	if x != nil {
		return x.Kvs
	}
	return nil
}

type Arr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Val                 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Arr) Reset() {
	*x = Arr{}
	mi := &file_types_v1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Arr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arr) ProtoMessage() {}

func (x *Arr) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arr.ProtoReflect.Descriptor instead.
func (*Arr) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *Arr) GetItems() []*Val {
	if x != nil {
		return x.Items
	}
	return nil
}

type Scalar struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  *VarType               `protobuf:"bytes,100,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Scalar_Str
	//	*Scalar_F64
	//	*Scalar_I64
	//	*Scalar_Bool
	//	*Scalar_Ts
	//	*Scalar_Dur
	Kind          isScalar_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scalar) Reset() {
	*x = Scalar{}
	mi := &file_types_v1_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalar) ProtoMessage() {}

func (x *Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalar.ProtoReflect.Descriptor instead.
func (*Scalar) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *Scalar) GetType() *VarType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Scalar) GetKind() isScalar_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Scalar) GetStr() string {
	if x != nil {
		if x, ok := x.Kind.(*Scalar_Str); ok {
			return x.Str
		}
	}
	return ""
}

func (x *Scalar) GetF64() float64 {
	if x != nil {
		if x, ok := x.Kind.(*Scalar_F64); ok {
			return x.F64
		}
	}
	return 0
}

func (x *Scalar) GetI64() int64 {
	if x != nil {
		if x, ok := x.Kind.(*Scalar_I64); ok {
			return x.I64
		}
	}
	return 0
}

func (x *Scalar) GetBool() bool {
	if x != nil {
		if x, ok := x.Kind.(*Scalar_Bool); ok {
			return x.Bool
		}
	}
	return false
}

func (x *Scalar) GetTs() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Kind.(*Scalar_Ts); ok {
			return x.Ts
		}
	}
	return nil
}

func (x *Scalar) GetDur() *durationpb.Duration {
	if x != nil {
		if x, ok := x.Kind.(*Scalar_Dur); ok {
			return x.Dur
		}
	}
	return nil
}

type isScalar_Kind interface {
	isScalar_Kind()
}

type Scalar_Str struct {
	Str string `protobuf:"bytes,201,opt,name=str,proto3,oneof"`
}

type Scalar_F64 struct {
	F64 float64 `protobuf:"fixed64,202,opt,name=f64,proto3,oneof"`
}

type Scalar_I64 struct {
	I64 int64 `protobuf:"varint,203,opt,name=i64,proto3,oneof"`
}

type Scalar_Bool struct {
	Bool bool `protobuf:"varint,204,opt,name=bool,proto3,oneof"`
}

type Scalar_Ts struct {
	Ts *timestamppb.Timestamp `protobuf:"bytes,207,opt,name=ts,proto3,oneof"`
}

type Scalar_Dur struct {
	Dur *durationpb.Duration `protobuf:"bytes,208,opt,name=dur,proto3,oneof"`
}

func (*Scalar_Str) isScalar_Kind() {}

func (*Scalar_F64) isScalar_Kind() {}

func (*Scalar_I64) isScalar_Kind() {}

func (*Scalar_Bool) isScalar_Kind() {}

func (*Scalar_Ts) isScalar_Kind() {}

func (*Scalar_Dur) isScalar_Kind() {}

type FlatKV struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *Scalar                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlatKV) Reset() {
	*x = FlatKV{}
	mi := &file_types_v1_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatKV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatKV) ProtoMessage() {}

func (x *FlatKV) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatKV.ProtoReflect.Descriptor instead.
func (*FlatKV) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *FlatKV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FlatKV) GetValue() *Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type FlatArr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Scalar              `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlatArr) Reset() {
	*x = FlatArr{}
	mi := &file_types_v1_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatArr) ProtoMessage() {}

func (x *FlatArr) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatArr.ProtoReflect.Descriptor instead.
func (*FlatArr) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *FlatArr) GetItems() []*Scalar {
	if x != nil {
		return x.Items
	}
	return nil
}

type TableType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Columns       []*TableType_Column    `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableType) Reset() {
	*x = TableType{}
	mi := &file_types_v1_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableType) ProtoMessage() {}

func (x *TableType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableType.ProtoReflect.Descriptor instead.
func (*TableType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *TableType) GetColumns() []*TableType_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *TableType             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Rows          []*FlatArr             `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_types_v1_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *Table) GetType() *TableType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Table) GetRows() []*FlatArr {
	if x != nil {
		return x.Rows
	}
	return nil
}

type DataStreamType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*DataStreamType_Multi
	//	*DataStreamType_Tabular
	//	*DataStreamType_ScalarTimeseries
	//	*DataStreamType_VectorTimeseries
	Type          isDataStreamType_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataStreamType) Reset() {
	*x = DataStreamType{}
	mi := &file_types_v1_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataStreamType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStreamType) ProtoMessage() {}

func (x *DataStreamType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStreamType.ProtoReflect.Descriptor instead.
func (*DataStreamType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{10}
}

func (x *DataStreamType) GetType() isDataStreamType_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DataStreamType) GetMulti() *MultiDataStreamType {
	if x != nil {
		if x, ok := x.Type.(*DataStreamType_Multi); ok {
			return x.Multi
		}
	}
	return nil
}

func (x *DataStreamType) GetTabular() *TabularType {
	if x != nil {
		if x, ok := x.Type.(*DataStreamType_Tabular); ok {
			return x.Tabular
		}
	}
	return nil
}

func (x *DataStreamType) GetScalarTimeseries() *ScalarTimeseriesType {
	if x != nil {
		if x, ok := x.Type.(*DataStreamType_ScalarTimeseries); ok {
			return x.ScalarTimeseries
		}
	}
	return nil
}

func (x *DataStreamType) GetVectorTimeseries() *VectorTimeseriesType {
	if x != nil {
		if x, ok := x.Type.(*DataStreamType_VectorTimeseries); ok {
			return x.VectorTimeseries
		}
	}
	return nil
}

type isDataStreamType_Type interface {
	isDataStreamType_Type()
}

type DataStreamType_Multi struct {
	Multi *MultiDataStreamType `protobuf:"bytes,1,opt,name=multi,proto3,oneof"`
}

type DataStreamType_Tabular struct {
	Tabular *TabularType `protobuf:"bytes,2,opt,name=tabular,proto3,oneof"`
}

type DataStreamType_ScalarTimeseries struct {
	ScalarTimeseries *ScalarTimeseriesType `protobuf:"bytes,3,opt,name=scalar_timeseries,json=scalarTimeseries,proto3,oneof"`
}

type DataStreamType_VectorTimeseries struct {
	VectorTimeseries *VectorTimeseriesType `protobuf:"bytes,4,opt,name=vector_timeseries,json=vectorTimeseries,proto3,oneof"`
}

func (*DataStreamType_Multi) isDataStreamType_Type() {}

func (*DataStreamType_Tabular) isDataStreamType_Type() {}

func (*DataStreamType_ScalarTimeseries) isDataStreamType_Type() {}

func (*DataStreamType_VectorTimeseries) isDataStreamType_Type() {}

type MultiDataStreamType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       *DataStreamType        `protobuf:"bytes,1,opt,name=streams,proto3" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiDataStreamType) Reset() {
	*x = MultiDataStreamType{}
	mi := &file_types_v1_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiDataStreamType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDataStreamType) ProtoMessage() {}

func (x *MultiDataStreamType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDataStreamType.ProtoReflect.Descriptor instead.
func (*MultiDataStreamType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{11}
}

func (x *MultiDataStreamType) GetStreams() *DataStreamType {
	if x != nil {
		return x.Streams
	}
	return nil
}

type TabularType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*TabularType_Table
	//	*TabularType_LogEvents
	Type          isTabularType_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TabularType) Reset() {
	*x = TabularType{}
	mi := &file_types_v1_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularType) ProtoMessage() {}

func (x *TabularType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularType.ProtoReflect.Descriptor instead.
func (*TabularType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{12}
}

func (x *TabularType) GetType() isTabularType_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TabularType) GetTable() *TableType {
	if x != nil {
		if x, ok := x.Type.(*TabularType_Table); ok {
			return x.Table
		}
	}
	return nil
}

func (x *TabularType) GetLogEvents() *TabularType_LogEventType {
	if x != nil {
		if x, ok := x.Type.(*TabularType_LogEvents); ok {
			return x.LogEvents
		}
	}
	return nil
}

type isTabularType_Type interface {
	isTabularType_Type()
}

type TabularType_Table struct {
	Table *TableType `protobuf:"bytes,1,opt,name=table,proto3,oneof"`
}

type TabularType_LogEvents struct {
	LogEvents *TabularType_LogEventType `protobuf:"bytes,2,opt,name=log_events,json=logEvents,proto3,oneof"`
}

func (*TabularType_Table) isTabularType_Type() {}

func (*TabularType_LogEvents) isTabularType_Type() {}

type ScalarTimeseriesType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// each row will contain a timestamp along with a scalar
	// value of this type
	Type          ScalarType `protobuf:"varint,1,opt,name=type,proto3,enum=types.v1.ScalarType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScalarTimeseriesType) Reset() {
	*x = ScalarTimeseriesType{}
	mi := &file_types_v1_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarTimeseriesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTimeseriesType) ProtoMessage() {}

func (x *ScalarTimeseriesType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTimeseriesType.ProtoReflect.Descriptor instead.
func (*ScalarTimeseriesType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{13}
}

func (x *ScalarTimeseriesType) GetType() ScalarType {
	if x != nil {
		return x.Type
	}
	return ScalarType_unknown
}

type VectorTimeseriesType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// each row will contain a timestamp along with a vector
	// where each element is of this type
	VectorElementType ScalarType `protobuf:"varint,1,opt,name=vector_element_type,json=vectorElementType,proto3,enum=types.v1.ScalarType" json:"vector_element_type,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VectorTimeseriesType) Reset() {
	*x = VectorTimeseriesType{}
	mi := &file_types_v1_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorTimeseriesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorTimeseriesType) ProtoMessage() {}

func (x *VectorTimeseriesType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorTimeseriesType.ProtoReflect.Descriptor instead.
func (*VectorTimeseriesType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{14}
}

func (x *VectorTimeseriesType) GetVectorElementType() ScalarType {
	if x != nil {
		return x.VectorElementType
	}
	return ScalarType_unknown
}

type VarType_ArrayType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         *VarType               `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VarType_ArrayType) Reset() {
	*x = VarType_ArrayType{}
	mi := &file_types_v1_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VarType_ArrayType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarType_ArrayType) ProtoMessage() {}

func (x *VarType_ArrayType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarType_ArrayType.ProtoReflect.Descriptor instead.
func (*VarType_ArrayType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VarType_ArrayType) GetItems() *VarType {
	if x != nil {
		return x.Items
	}
	return nil
}

type VarType_ObjectType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kvs           map[string]*VarType    `protobuf:"bytes,1,rep,name=kvs,proto3" json:"kvs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VarType_ObjectType) Reset() {
	*x = VarType_ObjectType{}
	mi := &file_types_v1_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VarType_ObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarType_ObjectType) ProtoMessage() {}

func (x *VarType_ObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarType_ObjectType.ProtoReflect.Descriptor instead.
func (*VarType_ObjectType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{0, 1}
}

func (x *VarType_ObjectType) GetKvs() map[string]*VarType {
	if x != nil {
		return x.Kvs
	}
	return nil
}

type TableType_Column struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          *VarType               `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableType_Column) Reset() {
	*x = TableType_Column{}
	mi := &file_types_v1_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableType_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableType_Column) ProtoMessage() {}

func (x *TableType_Column) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableType_Column.ProtoReflect.Descriptor instead.
func (*TableType_Column) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{8, 0}
}

func (x *TableType_Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableType_Column) GetType() *VarType {
	if x != nil {
		return x.Type
	}
	return nil
}

type TabularType_LogEventType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TabularType_LogEventType) Reset() {
	*x = TabularType_LogEventType{}
	mi := &file_types_v1_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularType_LogEventType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularType_LogEventType) ProtoMessage() {}

func (x *TabularType_LogEventType) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularType_LogEventType.ProtoReflect.Descriptor instead.
func (*TabularType_LogEventType) Descriptor() ([]byte, []int) {
	return file_types_v1_types_proto_rawDescGZIP(), []int{12, 0}
}

var File_types_v1_types_proto protoreflect.FileDescriptor

var file_types_v1_types_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf7, 0x02, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x33, 0x0a,
	0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x34, 0x0a, 0x09, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x1a, 0x90, 0x01, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4b, 0x76, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x76, 0x73, 0x1a, 0x49, 0x0a, 0x08, 0x4b, 0x76, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x02, 0x4b,
	0x56, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x03, 0x56, 0x61, 0x6c,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x13, 0x0a, 0x03,
	0x66, 0x36, 0x34, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x66, 0x36,
	0x34, 0x12, 0x13, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xcc,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x22, 0x0a,
	0x03, 0x61, 0x72, 0x72, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x48, 0x00, 0x52, 0x03, 0x61, 0x72,
	0x72, 0x12, 0x22, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x48, 0x00,
	0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x2d, 0x0a, 0x02, 0x74, 0x73, 0x18, 0xcf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x64, 0x75, 0x72, 0x18, 0xd0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x64, 0x75, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x25, 0x0a, 0x03,
	0x4f, 0x62, 0x6a, 0x12, 0x1e, 0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x56, 0x52, 0x03,
	0x6b, 0x76, 0x73, 0x22, 0x2a, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xec, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x13, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0xca, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x13, 0x0a, 0x03, 0x69,
	0x36, 0x34, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x36, 0x34,
	0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x02, 0x74, 0x73, 0x18, 0xcf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x02, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x64, 0x75, 0x72, 0x18, 0xd0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x03, 0x64, 0x75, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x42,
	0x0a, 0x06, 0x46, 0x6c, 0x61, 0x74, 0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x31, 0x0a, 0x07, 0x46, 0x6c, 0x61, 0x74, 0x41, 0x72, 0x72, 0x12, 0x26, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x43, 0x0a, 0x06, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x57,
	0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x41, 0x72,
	0x72, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x40, 0x0a, 0x14, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x5c, 0x0a, 0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x13, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2a,
	0x4f, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x74,
	0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x69, 0x36, 0x34, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x10, 0x04, 0x12,
	0x06, 0x0a, 0x02, 0x74, 0x73, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x75, 0x72, 0x10, 0x06,
	0x42, 0x8a, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x6c, 0x6f, 0x67, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x08, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x09, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_v1_types_proto_rawDescOnce sync.Once
	file_types_v1_types_proto_rawDescData = file_types_v1_types_proto_rawDesc
)

func file_types_v1_types_proto_rawDescGZIP() []byte {
	file_types_v1_types_proto_rawDescOnce.Do(func() {
		file_types_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_v1_types_proto_rawDescData)
	})
	return file_types_v1_types_proto_rawDescData
}

var file_types_v1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_types_v1_types_proto_goTypes = []any{
	(ScalarType)(0),                  // 0: types.v1.ScalarType
	(*VarType)(nil),                  // 1: types.v1.VarType
	(*KV)(nil),                       // 2: types.v1.KV
	(*Val)(nil),                      // 3: types.v1.Val
	(*Obj)(nil),                      // 4: types.v1.Obj
	(*Arr)(nil),                      // 5: types.v1.Arr
	(*Scalar)(nil),                   // 6: types.v1.Scalar
	(*FlatKV)(nil),                   // 7: types.v1.FlatKV
	(*FlatArr)(nil),                  // 8: types.v1.FlatArr
	(*TableType)(nil),                // 9: types.v1.TableType
	(*Table)(nil),                    // 10: types.v1.Table
	(*DataStreamType)(nil),           // 11: types.v1.DataStreamType
	(*MultiDataStreamType)(nil),      // 12: types.v1.MultiDataStreamType
	(*TabularType)(nil),              // 13: types.v1.TabularType
	(*ScalarTimeseriesType)(nil),     // 14: types.v1.ScalarTimeseriesType
	(*VectorTimeseriesType)(nil),     // 15: types.v1.VectorTimeseriesType
	(*VarType_ArrayType)(nil),        // 16: types.v1.VarType.ArrayType
	(*VarType_ObjectType)(nil),       // 17: types.v1.VarType.ObjectType
	nil,                              // 18: types.v1.VarType.ObjectType.KvsEntry
	(*TableType_Column)(nil),         // 19: types.v1.TableType.Column
	(*TabularType_LogEventType)(nil), // 20: types.v1.TabularType.LogEventType
	(*timestamppb.Timestamp)(nil),    // 21: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),      // 22: google.protobuf.Duration
}
var file_types_v1_types_proto_depIdxs = []int32{
	0,  // 0: types.v1.VarType.scalar:type_name -> types.v1.ScalarType
	16, // 1: types.v1.VarType.array:type_name -> types.v1.VarType.ArrayType
	17, // 2: types.v1.VarType.object:type_name -> types.v1.VarType.ObjectType
	3,  // 3: types.v1.KV.value:type_name -> types.v1.Val
	1,  // 4: types.v1.Val.type:type_name -> types.v1.VarType
	5,  // 5: types.v1.Val.arr:type_name -> types.v1.Arr
	4,  // 6: types.v1.Val.obj:type_name -> types.v1.Obj
	21, // 7: types.v1.Val.ts:type_name -> google.protobuf.Timestamp
	22, // 8: types.v1.Val.dur:type_name -> google.protobuf.Duration
	2,  // 9: types.v1.Obj.kvs:type_name -> types.v1.KV
	3,  // 10: types.v1.Arr.items:type_name -> types.v1.Val
	1,  // 11: types.v1.Scalar.type:type_name -> types.v1.VarType
	21, // 12: types.v1.Scalar.ts:type_name -> google.protobuf.Timestamp
	22, // 13: types.v1.Scalar.dur:type_name -> google.protobuf.Duration
	6,  // 14: types.v1.FlatKV.value:type_name -> types.v1.Scalar
	6,  // 15: types.v1.FlatArr.items:type_name -> types.v1.Scalar
	19, // 16: types.v1.TableType.columns:type_name -> types.v1.TableType.Column
	9,  // 17: types.v1.Table.type:type_name -> types.v1.TableType
	8,  // 18: types.v1.Table.rows:type_name -> types.v1.FlatArr
	12, // 19: types.v1.DataStreamType.multi:type_name -> types.v1.MultiDataStreamType
	13, // 20: types.v1.DataStreamType.tabular:type_name -> types.v1.TabularType
	14, // 21: types.v1.DataStreamType.scalar_timeseries:type_name -> types.v1.ScalarTimeseriesType
	15, // 22: types.v1.DataStreamType.vector_timeseries:type_name -> types.v1.VectorTimeseriesType
	11, // 23: types.v1.MultiDataStreamType.streams:type_name -> types.v1.DataStreamType
	9,  // 24: types.v1.TabularType.table:type_name -> types.v1.TableType
	20, // 25: types.v1.TabularType.log_events:type_name -> types.v1.TabularType.LogEventType
	0,  // 26: types.v1.ScalarTimeseriesType.type:type_name -> types.v1.ScalarType
	0,  // 27: types.v1.VectorTimeseriesType.vector_element_type:type_name -> types.v1.ScalarType
	1,  // 28: types.v1.VarType.ArrayType.items:type_name -> types.v1.VarType
	18, // 29: types.v1.VarType.ObjectType.kvs:type_name -> types.v1.VarType.ObjectType.KvsEntry
	1,  // 30: types.v1.VarType.ObjectType.KvsEntry.value:type_name -> types.v1.VarType
	1,  // 31: types.v1.TableType.Column.type:type_name -> types.v1.VarType
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_types_v1_types_proto_init() }
func file_types_v1_types_proto_init() {
	if File_types_v1_types_proto != nil {
		return
	}
	file_types_v1_types_proto_msgTypes[0].OneofWrappers = []any{
		(*VarType_Scalar)(nil),
		(*VarType_Array)(nil),
		(*VarType_Object)(nil),
	}
	file_types_v1_types_proto_msgTypes[2].OneofWrappers = []any{
		(*Val_Str)(nil),
		(*Val_F64)(nil),
		(*Val_I64)(nil),
		(*Val_Bool)(nil),
		(*Val_Arr)(nil),
		(*Val_Obj)(nil),
		(*Val_Ts)(nil),
		(*Val_Dur)(nil),
	}
	file_types_v1_types_proto_msgTypes[5].OneofWrappers = []any{
		(*Scalar_Str)(nil),
		(*Scalar_F64)(nil),
		(*Scalar_I64)(nil),
		(*Scalar_Bool)(nil),
		(*Scalar_Ts)(nil),
		(*Scalar_Dur)(nil),
	}
	file_types_v1_types_proto_msgTypes[10].OneofWrappers = []any{
		(*DataStreamType_Multi)(nil),
		(*DataStreamType_Tabular)(nil),
		(*DataStreamType_ScalarTimeseries)(nil),
		(*DataStreamType_VectorTimeseries)(nil),
	}
	file_types_v1_types_proto_msgTypes[12].OneofWrappers = []any{
		(*TabularType_Table)(nil),
		(*TabularType_LogEvents)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_v1_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_v1_types_proto_goTypes,
		DependencyIndexes: file_types_v1_types_proto_depIdxs,
		EnumInfos:         file_types_v1_types_proto_enumTypes,
		MessageInfos:      file_types_v1_types_proto_msgTypes,
	}.Build()
	File_types_v1_types_proto = out.File
	file_types_v1_types_proto_rawDesc = nil
	file_types_v1_types_proto_goTypes = nil
	file_types_v1_types_proto_depIdxs = nil
}
