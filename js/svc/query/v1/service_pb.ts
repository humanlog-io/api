// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/query/v1/service.proto (package svc.query.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { LogQuery } from "../../../types/v1/logquery_pb";
import { LogEventGroup } from "../../../types/v1/logevent_pb";

/**
 * @generated from message svc.query.v1.SummarizeEventsRequest
 */
export class SummarizeEventsRequest extends Message<SummarizeEventsRequest> {
  /**
   * @generated from field: int64 environment_id = 1;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: optional google.protobuf.Timestamp from = 2;
   */
  from?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp to = 3;
   */
  to?: Timestamp;

  /**
   * @generated from field: uint32 bucket_count = 4;
   */
  bucketCount = 0;

  constructor(data?: PartialMessage<SummarizeEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.SummarizeEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "from", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "to", kind: "message", T: Timestamp, opt: true },
    { no: 4, name: "bucket_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeEventsRequest {
    return new SummarizeEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeEventsRequest {
    return new SummarizeEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeEventsRequest {
    return new SummarizeEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeEventsRequest | PlainMessage<SummarizeEventsRequest> | undefined, b: SummarizeEventsRequest | PlainMessage<SummarizeEventsRequest> | undefined): boolean {
    return proto3.util.equals(SummarizeEventsRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.SummarizeEventsResponse
 */
export class SummarizeEventsResponse extends Message<SummarizeEventsResponse> {
  /**
   * @generated from field: google.protobuf.Duration bucket_width = 1;
   */
  bucketWidth?: Duration;

  /**
   * @generated from field: repeated svc.query.v1.SummarizeEventsResponse.Bucket buckets = 2;
   */
  buckets: SummarizeEventsResponse_Bucket[] = [];

  constructor(data?: PartialMessage<SummarizeEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.SummarizeEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket_width", kind: "message", T: Duration },
    { no: 2, name: "buckets", kind: "message", T: SummarizeEventsResponse_Bucket, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeEventsResponse {
    return new SummarizeEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeEventsResponse {
    return new SummarizeEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeEventsResponse {
    return new SummarizeEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeEventsResponse | PlainMessage<SummarizeEventsResponse> | undefined, b: SummarizeEventsResponse | PlainMessage<SummarizeEventsResponse> | undefined): boolean {
    return proto3.util.equals(SummarizeEventsResponse, a, b);
  }
}

/**
 * @generated from message svc.query.v1.SummarizeEventsResponse.Bucket
 */
export class SummarizeEventsResponse_Bucket extends Message<SummarizeEventsResponse_Bucket> {
  /**
   * @generated from field: google.protobuf.Timestamp ts = 1;
   */
  ts?: Timestamp;

  /**
   * @generated from field: uint64 event_count = 2;
   */
  eventCount = protoInt64.zero;

  constructor(data?: PartialMessage<SummarizeEventsResponse_Bucket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.SummarizeEventsResponse.Bucket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts", kind: "message", T: Timestamp },
    { no: 2, name: "event_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeEventsResponse_Bucket {
    return new SummarizeEventsResponse_Bucket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeEventsResponse_Bucket {
    return new SummarizeEventsResponse_Bucket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeEventsResponse_Bucket {
    return new SummarizeEventsResponse_Bucket().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeEventsResponse_Bucket | PlainMessage<SummarizeEventsResponse_Bucket> | undefined, b: SummarizeEventsResponse_Bucket | PlainMessage<SummarizeEventsResponse_Bucket> | undefined): boolean {
    return proto3.util.equals(SummarizeEventsResponse_Bucket, a, b);
  }
}

/**
 * @generated from message svc.query.v1.WatchQueryRequest
 */
export class WatchQueryRequest extends Message<WatchQueryRequest> {
  /**
   * @generated from field: int64 environment_id = 1;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: types.v1.LogQuery query = 2;
   */
  query?: LogQuery;

  constructor(data?: PartialMessage<WatchQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.WatchQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "query", kind: "message", T: LogQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchQueryRequest {
    return new WatchQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchQueryRequest {
    return new WatchQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchQueryRequest {
    return new WatchQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchQueryRequest | PlainMessage<WatchQueryRequest> | undefined, b: WatchQueryRequest | PlainMessage<WatchQueryRequest> | undefined): boolean {
    return proto3.util.equals(WatchQueryRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.WatchQueryResponse
 */
export class WatchQueryResponse extends Message<WatchQueryResponse> {
  /**
   * @generated from field: repeated types.v1.LogEventGroup events = 1;
   */
  events: LogEventGroup[] = [];

  constructor(data?: PartialMessage<WatchQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.WatchQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: LogEventGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchQueryResponse {
    return new WatchQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchQueryResponse {
    return new WatchQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchQueryResponse {
    return new WatchQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchQueryResponse | PlainMessage<WatchQueryResponse> | undefined, b: WatchQueryResponse | PlainMessage<WatchQueryResponse> | undefined): boolean {
    return proto3.util.equals(WatchQueryResponse, a, b);
  }
}

