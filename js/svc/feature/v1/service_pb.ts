// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/feature/v1/service.proto (package svc.feature.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message svc.feature.v1.HasFeatureRequest
 */
export class HasFeatureRequest extends Message<HasFeatureRequest> {
  /**
   * @generated from field: string feature = 1;
   */
  feature = "";

  constructor(data?: PartialMessage<HasFeatureRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.feature.v1.HasFeatureRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasFeatureRequest {
    return new HasFeatureRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasFeatureRequest {
    return new HasFeatureRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasFeatureRequest {
    return new HasFeatureRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HasFeatureRequest | PlainMessage<HasFeatureRequest> | undefined, b: HasFeatureRequest | PlainMessage<HasFeatureRequest> | undefined): boolean {
    return proto3.util.equals(HasFeatureRequest, a, b);
  }
}

/**
 * @generated from message svc.feature.v1.HasFeatureResponse
 */
export class HasFeatureResponse extends Message<HasFeatureResponse> {
  /**
   * @generated from field: bool available = 1;
   */
  available = false;

  constructor(data?: PartialMessage<HasFeatureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.feature.v1.HasFeatureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasFeatureResponse {
    return new HasFeatureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasFeatureResponse {
    return new HasFeatureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasFeatureResponse {
    return new HasFeatureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HasFeatureResponse | PlainMessage<HasFeatureResponse> | undefined, b: HasFeatureResponse | PlainMessage<HasFeatureResponse> | undefined): boolean {
    return proto3.util.equals(HasFeatureResponse, a, b);
  }
}

