// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/organization/v1/service.proto (package svc.organization.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Environment } from "../../../types/v1/environment_pb";
import { Cursor } from "../../../types/v1/cursor_pb";
import { User } from "../../../types/v1/user_pb";
import { PaymentMethod } from "../../../types/v1/payment_method_pb";

/**
 * @generated from message svc.organization.v1.CreateEnvironmentRequest
 */
export class CreateEnvironmentRequest extends Message<CreateEnvironmentRequest> {
  /**
   * @generated from field: string environment_name = 1;
   */
  environmentName = "";

  constructor(data?: PartialMessage<CreateEnvironmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.CreateEnvironmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEnvironmentRequest {
    return new CreateEnvironmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEnvironmentRequest {
    return new CreateEnvironmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEnvironmentRequest {
    return new CreateEnvironmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEnvironmentRequest | PlainMessage<CreateEnvironmentRequest> | undefined, b: CreateEnvironmentRequest | PlainMessage<CreateEnvironmentRequest> | undefined): boolean {
    return proto3.util.equals(CreateEnvironmentRequest, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.CreateEnvironmentResponse
 */
export class CreateEnvironmentResponse extends Message<CreateEnvironmentResponse> {
  /**
   * @generated from field: types.v1.Environment environment = 1;
   */
  environment?: Environment;

  constructor(data?: PartialMessage<CreateEnvironmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.CreateEnvironmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "message", T: Environment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEnvironmentResponse {
    return new CreateEnvironmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEnvironmentResponse {
    return new CreateEnvironmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEnvironmentResponse {
    return new CreateEnvironmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEnvironmentResponse | PlainMessage<CreateEnvironmentResponse> | undefined, b: CreateEnvironmentResponse | PlainMessage<CreateEnvironmentResponse> | undefined): boolean {
    return proto3.util.equals(CreateEnvironmentResponse, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListEnvironmentRequest
 */
export class ListEnvironmentRequest extends Message<ListEnvironmentRequest> {
  /**
   * @generated from field: types.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListEnvironmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListEnvironmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "message", T: Cursor },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnvironmentRequest {
    return new ListEnvironmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnvironmentRequest {
    return new ListEnvironmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnvironmentRequest {
    return new ListEnvironmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnvironmentRequest | PlainMessage<ListEnvironmentRequest> | undefined, b: ListEnvironmentRequest | PlainMessage<ListEnvironmentRequest> | undefined): boolean {
    return proto3.util.equals(ListEnvironmentRequest, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListEnvironmentResponse
 */
export class ListEnvironmentResponse extends Message<ListEnvironmentResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 1;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.organization.v1.ListEnvironmentResponse.ListItem items = 2;
   */
  items: ListEnvironmentResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListEnvironmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListEnvironmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "message", T: Cursor },
    { no: 2, name: "items", kind: "message", T: ListEnvironmentResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnvironmentResponse {
    return new ListEnvironmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnvironmentResponse {
    return new ListEnvironmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnvironmentResponse {
    return new ListEnvironmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnvironmentResponse | PlainMessage<ListEnvironmentResponse> | undefined, b: ListEnvironmentResponse | PlainMessage<ListEnvironmentResponse> | undefined): boolean {
    return proto3.util.equals(ListEnvironmentResponse, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListEnvironmentResponse.ListItem
 */
export class ListEnvironmentResponse_ListItem extends Message<ListEnvironmentResponse_ListItem> {
  /**
   * @generated from field: types.v1.Environment environment = 1;
   */
  environment?: Environment;

  constructor(data?: PartialMessage<ListEnvironmentResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListEnvironmentResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "message", T: Environment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnvironmentResponse_ListItem {
    return new ListEnvironmentResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnvironmentResponse_ListItem {
    return new ListEnvironmentResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnvironmentResponse_ListItem {
    return new ListEnvironmentResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnvironmentResponse_ListItem | PlainMessage<ListEnvironmentResponse_ListItem> | undefined, b: ListEnvironmentResponse_ListItem | PlainMessage<ListEnvironmentResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListEnvironmentResponse_ListItem, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListUserRequest
 */
export class ListUserRequest extends Message<ListUserRequest> {
  /**
   * @generated from field: types.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "message", T: Cursor },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserRequest {
    return new ListUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserRequest {
    return new ListUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserRequest {
    return new ListUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserRequest | PlainMessage<ListUserRequest> | undefined, b: ListUserRequest | PlainMessage<ListUserRequest> | undefined): boolean {
    return proto3.util.equals(ListUserRequest, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListUserResponse
 */
export class ListUserResponse extends Message<ListUserResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 1;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.organization.v1.ListUserResponse.ListItem items = 2;
   */
  items: ListUserResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "message", T: Cursor },
    { no: 2, name: "items", kind: "message", T: ListUserResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserResponse {
    return new ListUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserResponse {
    return new ListUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserResponse {
    return new ListUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserResponse | PlainMessage<ListUserResponse> | undefined, b: ListUserResponse | PlainMessage<ListUserResponse> | undefined): boolean {
    return proto3.util.equals(ListUserResponse, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListUserResponse.ListItem
 */
export class ListUserResponse_ListItem extends Message<ListUserResponse_ListItem> {
  /**
   * @generated from field: types.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<ListUserResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListUserResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserResponse_ListItem {
    return new ListUserResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserResponse_ListItem {
    return new ListUserResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserResponse_ListItem {
    return new ListUserResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserResponse_ListItem | PlainMessage<ListUserResponse_ListItem> | undefined, b: ListUserResponse_ListItem | PlainMessage<ListUserResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListUserResponse_ListItem, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.InviteUserRequest
 */
export class InviteUserRequest extends Message<InviteUserRequest> {
  /**
   * @generated from field: int64 user_email = 1;
   */
  userEmail = protoInt64.zero;

  constructor(data?: PartialMessage<InviteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.InviteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_email", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined, b: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined): boolean {
    return proto3.util.equals(InviteUserRequest, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.InviteUserResponse
 */
export class InviteUserResponse extends Message<InviteUserResponse> {
  constructor(data?: PartialMessage<InviteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.InviteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined, b: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined): boolean {
    return proto3.util.equals(InviteUserResponse, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.RevokeUserRequest
 */
export class RevokeUserRequest extends Message<RevokeUserRequest> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<RevokeUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.RevokeUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeUserRequest {
    return new RevokeUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeUserRequest {
    return new RevokeUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeUserRequest {
    return new RevokeUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeUserRequest | PlainMessage<RevokeUserRequest> | undefined, b: RevokeUserRequest | PlainMessage<RevokeUserRequest> | undefined): boolean {
    return proto3.util.equals(RevokeUserRequest, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.RevokeUserResponse
 */
export class RevokeUserResponse extends Message<RevokeUserResponse> {
  constructor(data?: PartialMessage<RevokeUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.RevokeUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeUserResponse {
    return new RevokeUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeUserResponse {
    return new RevokeUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeUserResponse {
    return new RevokeUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeUserResponse | PlainMessage<RevokeUserResponse> | undefined, b: RevokeUserResponse | PlainMessage<RevokeUserResponse> | undefined): boolean {
    return proto3.util.equals(RevokeUserResponse, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.GetStripePublishableKeyRequest
 */
export class GetStripePublishableKeyRequest extends Message<GetStripePublishableKeyRequest> {
  constructor(data?: PartialMessage<GetStripePublishableKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.GetStripePublishableKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStripePublishableKeyRequest {
    return new GetStripePublishableKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStripePublishableKeyRequest {
    return new GetStripePublishableKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStripePublishableKeyRequest {
    return new GetStripePublishableKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStripePublishableKeyRequest | PlainMessage<GetStripePublishableKeyRequest> | undefined, b: GetStripePublishableKeyRequest | PlainMessage<GetStripePublishableKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetStripePublishableKeyRequest, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.GetStripePublishableKeyResponse
 */
export class GetStripePublishableKeyResponse extends Message<GetStripePublishableKeyResponse> {
  /**
   * @generated from field: string stripe_publishable_key = 2;
   */
  stripePublishableKey = "";

  constructor(data?: PartialMessage<GetStripePublishableKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.GetStripePublishableKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "stripe_publishable_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStripePublishableKeyResponse {
    return new GetStripePublishableKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStripePublishableKeyResponse {
    return new GetStripePublishableKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStripePublishableKeyResponse {
    return new GetStripePublishableKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStripePublishableKeyResponse | PlainMessage<GetStripePublishableKeyResponse> | undefined, b: GetStripePublishableKeyResponse | PlainMessage<GetStripePublishableKeyResponse> | undefined): boolean {
    return proto3.util.equals(GetStripePublishableKeyResponse, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListPaymentMethodRequest
 */
export class ListPaymentMethodRequest extends Message<ListPaymentMethodRequest> {
  /**
   * @generated from field: types.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListPaymentMethodRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListPaymentMethodRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "message", T: Cursor },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPaymentMethodRequest {
    return new ListPaymentMethodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPaymentMethodRequest {
    return new ListPaymentMethodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPaymentMethodRequest {
    return new ListPaymentMethodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPaymentMethodRequest | PlainMessage<ListPaymentMethodRequest> | undefined, b: ListPaymentMethodRequest | PlainMessage<ListPaymentMethodRequest> | undefined): boolean {
    return proto3.util.equals(ListPaymentMethodRequest, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListPaymentMethodResponse
 */
export class ListPaymentMethodResponse extends Message<ListPaymentMethodResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 1;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.organization.v1.ListPaymentMethodResponse.ListItem items = 2;
   */
  items: ListPaymentMethodResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListPaymentMethodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListPaymentMethodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "message", T: Cursor },
    { no: 2, name: "items", kind: "message", T: ListPaymentMethodResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPaymentMethodResponse {
    return new ListPaymentMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPaymentMethodResponse {
    return new ListPaymentMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPaymentMethodResponse {
    return new ListPaymentMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPaymentMethodResponse | PlainMessage<ListPaymentMethodResponse> | undefined, b: ListPaymentMethodResponse | PlainMessage<ListPaymentMethodResponse> | undefined): boolean {
    return proto3.util.equals(ListPaymentMethodResponse, a, b);
  }
}

/**
 * @generated from message svc.organization.v1.ListPaymentMethodResponse.ListItem
 */
export class ListPaymentMethodResponse_ListItem extends Message<ListPaymentMethodResponse_ListItem> {
  /**
   * @generated from field: types.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod?: PaymentMethod;

  constructor(data?: PartialMessage<ListPaymentMethodResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.organization.v1.ListPaymentMethodResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payment_method", kind: "message", T: PaymentMethod },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPaymentMethodResponse_ListItem {
    return new ListPaymentMethodResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPaymentMethodResponse_ListItem {
    return new ListPaymentMethodResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPaymentMethodResponse_ListItem {
    return new ListPaymentMethodResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListPaymentMethodResponse_ListItem | PlainMessage<ListPaymentMethodResponse_ListItem> | undefined, b: ListPaymentMethodResponse_ListItem | PlainMessage<ListPaymentMethodResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListPaymentMethodResponse_ListItem, a, b);
  }
}

