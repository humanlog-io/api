// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file types/v1/types.proto (package types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message types.v1.KV
 */
export class KV extends Message<KV> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: types.v1.Val value = 2;
   */
  value?: Val;

  constructor(data?: PartialMessage<KV>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.KV";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: Val },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KV {
    return new KV().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KV {
    return new KV().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KV {
    return new KV().fromJsonString(jsonString, options);
  }

  static equals(a: KV | PlainMessage<KV> | undefined, b: KV | PlainMessage<KV> | undefined): boolean {
    return proto3.util.equals(KV, a, b);
  }
}

/**
 * @generated from message types.v1.Val
 */
export class Val extends Message<Val> {
  /**
   * @generated from oneof types.v1.Val.kind
   */
  kind: {
    /**
     * @generated from field: string str = 1;
     */
    value: string;
    case: "str";
  } | {
    /**
     * @generated from field: double f64 = 2;
     */
    value: number;
    case: "f64";
  } | {
    /**
     * @generated from field: int64 i64 = 3;
     */
    value: bigint;
    case: "i64";
  } | {
    /**
     * @generated from field: bool bool = 4;
     */
    value: boolean;
    case: "bool";
  } | {
    /**
     * @generated from field: types.v1.Arr arr = 5;
     */
    value: Arr;
    case: "arr";
  } | {
    /**
     * @generated from field: types.v1.Obj obj = 6;
     */
    value: Obj;
    case: "obj";
  } | {
    /**
     * @generated from field: google.protobuf.Timestamp ts = 7;
     */
    value: Timestamp;
    case: "ts";
  } | {
    /**
     * @generated from field: google.protobuf.Duration dur = 8;
     */
    value: Duration;
    case: "dur";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Val>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Val";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "str", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 2, name: "f64", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "kind" },
    { no: 3, name: "i64", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "kind" },
    { no: 4, name: "bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "kind" },
    { no: 5, name: "arr", kind: "message", T: Arr, oneof: "kind" },
    { no: 6, name: "obj", kind: "message", T: Obj, oneof: "kind" },
    { no: 7, name: "ts", kind: "message", T: Timestamp, oneof: "kind" },
    { no: 8, name: "dur", kind: "message", T: Duration, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Val {
    return new Val().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Val {
    return new Val().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Val {
    return new Val().fromJsonString(jsonString, options);
  }

  static equals(a: Val | PlainMessage<Val> | undefined, b: Val | PlainMessage<Val> | undefined): boolean {
    return proto3.util.equals(Val, a, b);
  }
}

/**
 * @generated from message types.v1.Obj
 */
export class Obj extends Message<Obj> {
  /**
   * @generated from field: repeated types.v1.KV kvs = 1;
   */
  kvs: KV[] = [];

  constructor(data?: PartialMessage<Obj>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Obj";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kvs", kind: "message", T: KV, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Obj {
    return new Obj().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Obj {
    return new Obj().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Obj {
    return new Obj().fromJsonString(jsonString, options);
  }

  static equals(a: Obj | PlainMessage<Obj> | undefined, b: Obj | PlainMessage<Obj> | undefined): boolean {
    return proto3.util.equals(Obj, a, b);
  }
}

/**
 * @generated from message types.v1.Arr
 */
export class Arr extends Message<Arr> {
  /**
   * @generated from field: repeated types.v1.Val items = 1;
   */
  items: Val[] = [];

  constructor(data?: PartialMessage<Arr>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Arr";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Val, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Arr {
    return new Arr().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Arr {
    return new Arr().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Arr {
    return new Arr().fromJsonString(jsonString, options);
  }

  static equals(a: Arr | PlainMessage<Arr> | undefined, b: Arr | PlainMessage<Arr> | undefined): boolean {
    return proto3.util.equals(Arr, a, b);
  }
}

